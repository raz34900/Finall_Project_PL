-----------------------------------------
            Language Features
-----------------------------------------

1. Variable Declaration and Assignment
	- Variables are declared using the keyword VAR followed by an identifier and assignment (=).
	- Variables can hold integer values or functions (including anonymous functions).

2. Arithmetic Operations
	- Supports basic arithmetic operations: addition (+), subtraction (-), multiplication (*), division (/), and modulo (%).

3. Comparison Operators
	- Supports comparisons between integers: equal to (==), not equal to (!=), less than (<), greater than (>), less than or equal to (<=), greater than or equal to (>=).
	- Logical operators: AND, OR, and NOT for boolean logic.

4. Control Flow
	- Conditional expressions using IF, ELIF, and ELSE.
	- Conditions are evaluated in sequence, executing the corresponding block when a condition is true.

5. Functions
	- Supports user-defined functions using the keyword FUNC.
	- Functions can have named arguments.
	- Functions can be called with arguments.
	- Supports recursion for functions that call themselves.

6. Anonymous Functions (Lambda Expressions)
	- Supports anonymous functions using the keyword LAMBDA.
	- Syntax: LAMBDA arg1, arg2, ..., argN -> expression
	- Useful for defining quick, one-off functions without names.
	- Can be assigned to variables or used directly in expressions.

7. Unary Operators
	- Supports unary plus (+) and unary minus (-) for arithmetic operations.
	- Logical negation using NOT for boolean expressions.



-----------------------------------------
           Example Programs
-----------------------------------------
1. **Variable Assignment and Arithmetic Operations**
   VAR x = 5
   VAR y = x + 3
   VAR z = y * 2


2. **Function Definition and Function Call**
   FUNC add(x, y) -> x + y
   VAR result = add(5, 3)

3. Anonymous Functions (Lambda Expressions)
    # Assigning a lambda expression to a variable
    VAR increment = LAMBDA x -> x + 1
    VAR y = increment(5)  # y is 6

    # Defining a lambda with multiple arguments
    VAR multiply = LAMBDA x, y -> x * y
    VAR product = multiply(4, 5)  # product is 20

    # Passing a lambda as an argument to another function
    FUNC applyTwice(f, x) -> f(f(x))
    VAR result = applyTwice(LAMBDA y -> y + 2, 5)  # result is 9
